# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
#case "$TERM" in
#    xterm-color|*-256color) color_prompt=yes;;
#esac
#
## uncomment for a colored prompt, if the terminal has the capability; turned
## off by default to not distract the user: the focus in a terminal window
## should be on the output of commands, not on the prompt
#force_color_prompt=yes
#
#if [ -n "$force_color_prompt" ]; then
#    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#	# We have color support; assume it's compliant with Ecma-48
#	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
#	# a case would tend to support setf rather than setaf.)
#	color_prompt=yes
#    else
#	color_prompt=
#    fi
#fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# old prompt
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#    ;;
#*)
#    ;;
#esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# CUDA related 
# export PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}
export PATH=/usr/local/cuda-10.1/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda/extras/CUPTI/lib64
# export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda-9.0/lib64
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda-10.1/lib64

# for ffmpeg to work correctly
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH

# Add in some colour to your life
export GREP_OPTIONS='--color=auto'

# STK path
#export STK_INSTALL_DIR=/home/mannykoum/AGI_STK/stk11.4.0
#export STK_USRCONFIG_PATH=${STK_INSTALL_DIR}/config
#export LD_LIBRARY_PATH=${STK_INSTALL_DIR}/bin:${LD_LIBRARY_PATH}
#export STK_CONFIG_DIR=${STK_INSTALL_DIR}/config

# set variable for Impulse simulation
export IMPULSE_ROOT_DIR=/home/mannykoum/Manos_repos/OrbitSimulator

# add an rc for the python interpreter
export PYTHONSTARTUP=~/.pythonrc

# Ubuntu does not source VTE on a per session basis so Tilix and other term 
# emulators cannot see current directory when opening new tabs; fix by sourcing
# vte.sh if TILIX
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
        source /etc/profile.d/vte.sh
fi

# Powerline
#if [ -f `which powerline-daemon` ]; then
#	powerline-daemon -q
#	POWERLINE_BASH_CONTINUATION=1
#	POWERLINE_BASH_SELECT=1
#fi
#export POWERLINE_ROOT=/usr/local/lib/python3.8/dist-packages
#if [ -f $POWERLINE_ROOT/powerline/bindings/bash/powerline.sh ]; then
#	source $POWERLINE_ROOT/powerline/bindings/bash/powerline.sh
#fi

# ROS setup
# see this link why 
# https://www.miguelalonsojr.com/blog/robotics/ros/python3/2019/08/20/ros-melodic-python-3-build.html
# source ~/ros_catkin_ws/install/setup.bash
# source /opt/ros/melodic/setup.bash export PATH=/media/mannykoum/Data/android-dev/android-studio/bin${PATH:+:${PATH}} run own daemons
# /home/mannykoum/daemons/ip_update.py

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/usr/lib/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
#    eval "$__conda_setup"
#else
#    if [ -f "/usr/lib/anaconda3/etc/profile.d/conda.sh" ]; then
#        . "/usr/lib/anaconda3/etc/profile.d/conda.sh"
#    else
#        export PATH="/usr/lib/anaconda3/bin:$PATH"
#    fi
#fi
#unset __conda_setup
# <<< conda initialize <<<

# Get rid of that dreaded warning
unset GREP_OPTIONS


[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Go path for projects
# if go is installed
if command -v go &> /dev/null; then
    export GOPATH=~/go
    export PATH=$PATH:$GOPATH/bin
fi

# My local application binaries
USER_PATH="~/Applications/bin"
USER_PATH="${USER_PATH}:~/.bin"
export PATH="${USER_PATH}:${PATH}"

export RUSTC_WRAPPER=sccache

# Starship prompt
eval "$(starship init bash)"

if command -v nvm &> /dev/null; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# enable autocd
shopt -s autocd

# ROS
[ -f /opt/ros/noetic/setup.bash ] && source /opt/ros/noetic/setup.bash
[ -f /opt/ros/melodic/setup.bash ] && source /opt/ros/melodic/setup.bash
[ -f /opt/ros/kinetic/setup.bash ] && source /opt/ros/kinetic/setup.bash
export ARENA_ROOT=~/ROS/ArenaSDK_Linux_x64
export ARENA_CONFIG_ROOT=~/ROS/arena_camera_ros/catkin_ws

# env vars for config files, symlinks followed in case of gnu stow
CONF="/home/mannykoum/.config"
export NVIM_CONFIG="$CONF/nvim/init.lua"
export NVIM_CONFIG=$(readlink -f $NVIM_CONFIG)
export TMUX_CONFIG="$CONF/tmux/tmux.conf"
export TMUX_CONFIG=$(readlink -f $TMUX_CONFIG)
export KITTY_CONFIG="$CONF/kitty/kitty.conf"
export KITTY_CONFIG=$(readlink -f $KITTY_CONFIG)
export FISH_CONFIG="$CONF/fish/config.fish"
export FISH_CONFIG=$(readlink -f $FISH_CONFIG)
export STARSHIP_CONFIG="$CONF/starship.toml"
export STARSHIP_CONFIG=$(readlink -f $STARSHIP_CONFIG)
export I3_CONFIG="$CONF/i3/config"
export I3_CONFIG=$(readlink -f $I3_CONFIG)

# if alacritty
if command -v alacritty &> /dev/null; then
    export ALACRITTY_CONFIG="$CONF/alacritty/alacritty.yml"
    export ALACRITTY_CONFIG=$(readlink -f $ALACRITTY_CONFIG)
    source /home/mannykoum/programs/alacritty/extra/completions/alacritty.bash
fi

# default editor
export EDITOR="nvim"

# z - jump around
# if z.sh exists, source it
[ -f $HOME/programs/z/z.sh ] && . $HOME/programs/z/z.sh

# fzf
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# if Microchip/SoftConsole is installed, add to PATH
if [ -d "/opt/Microchip/SoftConsole-v2022.2-RISC-V-747" ]; then
    export SC_INSTALL_DIR="/opt/Microchip/SoftConsole-v2022.2-RISC-V-747"
    export PATH="${SC_INSTALL_DIR}/riscv-unknown-elf-gcc/bin:${PATH}"
else
    echo "SoftConsole not installed or not in the right path"
fi

# Libero License path
export LIBERO_PATH="/usr/local/microchip/Libero_SoC_v2022.2/Libero/"
export PATH="${LIBERO_PATH}bin64:${PATH}"
export PATH="${LIBERO_PATH}bin:${PATH}"
export LM_LICENSE_FILE="$HOME/License.dat"
export LM_LICENSE_FILE=1702@infinet:$LM_LICENSE_FILE
export SNPSLMD_LICENSE_FILE=1702@infinet:$LM_LICENSE_FILE

# if fpgenprog is installed, export to env
if command -v fpgenprog &> /dev/null; then
    export FPGENPROG=$(which fpgenprog)
else
    echo "fpgenprog not installed or not in the right path"
fi

# if hss-payload-generator is not installed print a message
if ! command -v hss-payload-generator &> /dev/null; then
    echo "hss-payload-generator not installed or not in the right path"
fi

# check whether npm, fd, make, gcc, meson, ripgrep, unzip, git, xclip, neovim is installed
# if not, install them
# if ! command -v npm &> /dev/null; then
#     echo "npm not found, installing..."
#     sudo apt install npm
# fi

if ! command -v fdfind &> /dev/null; then
    echo "fd not found, installing..."
    sudo apt install fd-find
fi

if ! command -v make &> /dev/null; then
    echo "make not found, installing..."
    sudo apt install make
fi

if ! command -v gcc &> /dev/null; then
    echo "gcc not found, installing..."
    sudo apt install gcc
fi

if ! command -v meson &> /dev/null; then
    echo "meson not found, installing..."
    sudo apt install meson
fi

if ! command -v rgrep &> /dev/null; then
    echo "ripgrep not found, installing..."
    sudo apt install ripgrep
fi

if ! command -v unzip &> /dev/null; then
    echo "unzip not found, installing..."
    sudo apt install unzip
fi

if ! command -v git &> /dev/null; then
    echo "git not found, installing..."
    sudo apt install git
fi

if ! command -v xclip &> /dev/null; then
    echo "xclip not found, installing..."
    sudo apt install xclip
fi

# super important
# fortune | cowsay -f moofasa

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Function definitions
if [ -f ~/.bash_functions ]; then
    . ~/.bash_functions
fi

. "$HOME/.cargo/env"
