# Declare SHELL
export SHELL=$(which zsh)

# My local application binaries
export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH
USER_PATH="~/Applications/bin"
USER_PATH="${USER_PATH}:~/.bin"
USER_PATH="${USER_PATH}:/snap/bin"
export PATH="${USER_PATH}:${PATH}"

# CUDA paths
export PATH=/usr/local/cuda-10.1/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda/extras/CUPTI/lib64
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/cuda-10.1/lib64

# ffmpeg path
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:$LD_LIBRARY_PATH

# Go path
if command -v go &> /dev/null; then
    export GOPATH=~/go
    export PATH=$PATH:$GOPATH/bin
fi

# Rust sccache
export RUSTC_WRAPPER=sccache

# Default editor
export EDITOR="nvim"

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="agnoster"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-inse593270nsitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# ROS setup
[ -f /opt/ros/noetic/setup.zsh ] && source /opt/ros/noetic/setup.zsh
[ -f /opt/ros/melodic/setup.zsh ] && source /opt/ros/melodic/setup.zsh
[ -f /opt/ros/kinetic/setup.zsh ] && source /opt/ros/kinetic/setup.zsh
export ARENA_ROOT=~/ROS/ArenaSDK_Linux_x64
export ARENA_CONFIG_ROOT=~/ROS/arena_camera_ros/catkin_ws

# Config file paths
CONF="/home/mannykoum/.config"
export NVIM_CONFIG="$CONF/nvim/init.lua"
export NVIM_CONFIG=$(readlink -f $NVIM_CONFIG)
export TMUX_CONFIG="$CONF/tmux/tmux.conf"
export TMUX_CONFIG=$(readlink -f $TMUX_CONFIG)
export KITTY_CONFIG="$CONF/kitty/kitty.conf"
export KITTY_CONFIG=$(readlink -f $KITTY_CONFIG)
export FISH_CONFIG="$CONF/fish/config.fish"
export FISH_CONFIG=$(readlink -f $FISH_CONFIG)
export STARSHIP_CONFIG="$CONF/starship.toml"
export STARSHIP_CONFIG=$(readlink -f $STARSHIP_CONFIG)
export I3_CONFIG="$CONF/i3/config"
export I3_CONFIG=$(readlink -f $I3_CONFIG)

# Alacritty config
if command -v alacritty &> /dev/null; then
    export ALACRITTY_CONFIG="$CONF/alacritty/alacritty.yml"
    export ALACRITTY_CONFIG=$(readlink -f $ALACRITTY_CONFIG)
fi

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Source aliases and functions
[ -f ~/.zsh_aliases ] && source ~/.zsh_aliases
[ -f ~/.zsh_functions ] && source ~/.zsh_functions

# z - jump around
[ -f $HOME/programs/z/z.sh ] && . $HOME/programs/z/z.sh

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Starship prompt
# eval "$(starship init zsh)"

# WSL2 specific settings
if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null; then
    export WGPU_BACKEND="vulkan"
fi

# Check for essential tools
if ! command -v fdfind &> /dev/null; then
    echo "fd not found, consider installing: sudo apt install fd-find"
fi
if ! command -v rg &> /dev/null; then
    echo "ripgrep not found, consider installing: sudo apt install ripgrep"
fi

